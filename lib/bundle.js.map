{"version":3,"file":"bundle.js","sources":["../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/style/cell.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/cellRenderers/renderCheckbox.tsx","../src/cellRenderers/renderToggleGroup.tsx","../src/cellRenderers/renderValue.tsx","../src/DataGridDefaultRenderersProvider.ts","../src/cellRenderers/SelectCellFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useColumnWidths.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingTabIndex.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/DragHandle.tsx","../src/EditCell.tsx","../src/GroupedColumnHeaderCell.tsx","../src/renderHeaderCell.tsx","../src/HeaderCell.tsx","../src/style/row.ts","../src/HeaderRow.tsx","../src/GroupedColumnHeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/ScrollToCell.tsx","../src/sortStatus.tsx","../src/style/core.ts","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/TreeDataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          isLastFrozenColumn: false,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport { type GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onDoubleClick={onDoubleClick}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport _ from 'lodash';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = _.uniqueId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: R) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + 1 + rowIdx;\n                const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    key={rowIdx}\n                    aria-rowindex={gridRowStart}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'\n  > {\n  columns: readonly Column<R, SR>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","scrollIntoView","element","inline","block","createCellEvent","defaultPrevented","cellEvent","_extends","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","_ref","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","_target$closest","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","React","createElement","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditableUtil","renderEditCell","editable","getSelectedCellColSpan","_ref2","_topSummaryRows$lengt","topSummaryRows","bottomSummaryRows","mainHeaderRowIdx","topSummaryRowsCount","type","getNextSelectedCellPosition","_ref3","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","_ref3$currentPosition","currentPosition","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","_iterator","_createForOfIteratorHelperLoose","_step","done","value","colIdx","getParentRowIdx","parent","level","setHeaderGroupColAndRowSpan","nextColumn","parentRowIdx","found","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","nextParentRowIdx","canExitGrid","_ref4","maxColIdx","_ref4$selectedPositio","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","insetBlockStart","gridRowStart","getCellStyle","index","gridColumnEnd","insetInlineStart","getCellClassname","_len","arguments","extraClasses","Array","_key","clsx","apply","concat","isLastFrozenColumn","min","Math","max","floor","sign","abs","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","getHeaderCellRowSpan","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","disabled","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","renderValue","_unused","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","_useRowSelection","isRowSelected","onRowSelectionChange","SelectFormatter","_useRowSelection2","isShiftClick","SelectGroupFormatter","_useRowSelection3","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","_defaultColumnOptions","_defaultColumnOptions2","_defaultColumnOptions3","_defaultColumnOptions4","_defaultColumnOptions5","_defaultColumnOptions6","_defaultColumnOptions7","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","draggable","_useMemo","useMemo","headerRowsCount","collectColumns","_rawColumn$frozen","_rawColumn$width","_rawColumn$minWidth","_rawColumn$maxWidth","_rawColumn$sortable","_rawColumn$resizable","_rawColumn$draggable","_rawColumn$renderCell","rawColumn","calculatedColumnParent","headerCellClass","children","push","sort","aKey","frozenA","bKey","frozenB","forEach","updateColumnParent","_useMemo2","columnMetrics","Map","left","totalFrozenColumnWidth","templateColumns","_iterator2","_step2","set","columnMetric","get","layoutCssVars","i","_useMemo3","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","_ref5","colOverscanStartIdx","colOverscanEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","_step$value","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","handleColumnResize","nextWidth","resizingKey","_iterator3","_step3","_step3$value","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","_useState","useState","inlineSize","setInlineSize","_useState2","blockSize","setBlockSize","_window","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","_getBoundingClientRec","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","columnWidth","latestDraggedOverRowIdx","isCellEditable","onRowsChange","onFill","onClick","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","getStyle","_column$colSpan","_getCellStyle","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","onDoubleClick","cellEditing","EditCell","_column$editorOptions","_column$editorOptions2","_column$editorOptions3","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","Fragment","GroupedColumnHeaderCell","isCellSelected","selectCell","_useRovingTabIndex","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","SortableHeaderCell","renderSortStatus","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","_column$renderHeaderC","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","sortIndex","findIndex","sortColumn","ariaSort","defaultRenderHeaderCell","onPointerDown","pointerType","pointerId","headerCell","parentElement","_headerCell$getBoundi","right","clientX","onPointerMove","_headerCell$getBoundi2","onLostPointerCapture","setPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","_","uniqueId","cells","memo","GroupedColumnHeaderRow","renderedParents","add","_parent","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","onContextMenu","isEditable","selectCellWrapper","openEditor","handleClick","handleContextMenu","handleRowChange","newRow","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","_objectWithoutPropertiesLoose","_excluded","handleDragEnter","RowComponent","forwardRef","defaultRenderRow","ScrollToCell","_ref$scrollToPosition","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","DataGrid","_renderers$renderRow","_renderers$renderSort","_renderers$renderChec","_renderers$noRowsFall","_bottomSummaryRows$le","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","headerRowHeight","rawSummaryRowHeight","summaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","_useState3","_useState4","_useState5","copiedCell","setCopiedCell","_useState6","_useState7","draggedOverRowIdx","setOverRowIdx","_useState8","setScrollToPosition","_resizedColumnWidths$","_useGridDimensions","gridHeight","_useCalculatedColumns","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","_useState9","setSelectedPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","headerRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","allRowsSelected","every","_useViewportRows","_useColumnWidths","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","focusCellOrCellContent","useImperativeHandle","scrollToCell","_ref6","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","_event$currentTarget","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","_ref7","originalRow","isColIdxWithinSelectionBounds","_ref8","isCellWithinEditBounds","_ref9","_ref10","enableEditor","samePosition","getCellToScroll","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","_cell$querySelector","elementToFocus","renderDragHandle","getCellEditor","_ref11","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","_selectedRows$has","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","from","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","groupRow","groupRowClassname","GroupedRow","groupBy","handleSelectGroup","setSize","posInSet","TreeDataGrid","_props$topSummaryRows","_props$topSummaryRows2","_props$topSummaryRows3","_props$topSummaryRows4","_props$bottomSummaryR","_props$bottomSummaryR2","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","_column$renderGroupCe","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","_i","_Object$entries","_Object$entries$_i","childGroups","childRowsCount","groupedRows","rowsCount","allGroupRows","isGroupRow","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","_rows$groupKey","getParentRowAndIndex","parentRow","parentRowAndIndex","_parentRowAndIndex$","groupIndex","isGroupRowSelected","cr","newRawSelectedRows","_iterator4","_step4","_iterator5","_step5","_column$idx","handleRowsChange","updatedRawRows","rawIndexes","_iterator6","_step6","rawIndex","groupId","newExpandedGroupIds","rowProps","_excluded2","_parentRowAndIndex$2","arr","isArray","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","_extends2","onBlur"],"mappings":"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"}